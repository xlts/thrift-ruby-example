#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'shopping_cart_types'

module CartService
  class Client
    include ::Thrift::Client

    def get_products()
      send_get_products()
      return recv_get_products()
    end

    def send_get_products()
      send_message('get_products', Get_products_args)
    end

    def recv_get_products()
      result = receive_message(Get_products_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_products failed: unknown result')
    end

    def show_cart()
      send_show_cart()
      return recv_show_cart()
    end

    def send_show_cart()
      send_message('show_cart', Show_cart_args)
    end

    def recv_show_cart()
      result = receive_message(Show_cart_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'show_cart failed: unknown result')
    end

    def add_item_to_cart(product, amount)
      send_add_item_to_cart(product, amount)
      return recv_add_item_to_cart()
    end

    def send_add_item_to_cart(product, amount)
      send_message('add_item_to_cart', Add_item_to_cart_args, :product => product, :amount => amount)
    end

    def recv_add_item_to_cart()
      result = receive_message(Add_item_to_cart_result)
      return result.success unless result.success.nil?
      raise result.amount_exceeded unless result.amount_exceeded.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_item_to_cart failed: unknown result')
    end

    def delete_product(product)
      send_delete_product(product)
      return recv_delete_product()
    end

    def send_delete_product(product)
      send_message('delete_product', Delete_product_args, :product => product)
    end

    def recv_delete_product()
      result = receive_message(Delete_product_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'delete_product failed: unknown result')
    end

    def edit_amount(product, amount)
      send_edit_amount(product, amount)
      return recv_edit_amount()
    end

    def send_edit_amount(product, amount)
      send_message('edit_amount', Edit_amount_args, :product => product, :amount => amount)
    end

    def recv_edit_amount()
      result = receive_message(Edit_amount_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'edit_amount failed: unknown result')
    end

    def check_out()
      send_check_out()
      return recv_check_out()
    end

    def send_check_out()
      send_message('check_out', Check_out_args)
    end

    def recv_check_out()
      result = receive_message(Check_out_result)
      return result.success unless result.success.nil?
      raise result.amount_exceeded unless result.amount_exceeded.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'check_out failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_get_products(seqid, iprot, oprot)
      args = read_args(iprot, Get_products_args)
      result = Get_products_result.new()
      result.success = @handler.get_products()
      write_result(result, oprot, 'get_products', seqid)
    end

    def process_show_cart(seqid, iprot, oprot)
      args = read_args(iprot, Show_cart_args)
      result = Show_cart_result.new()
      result.success = @handler.show_cart()
      write_result(result, oprot, 'show_cart', seqid)
    end

    def process_add_item_to_cart(seqid, iprot, oprot)
      args = read_args(iprot, Add_item_to_cart_args)
      result = Add_item_to_cart_result.new()
      begin
        result.success = @handler.add_item_to_cart(args.product, args.amount)
      rescue ::AmountExceeded => amount_exceeded
        result.amount_exceeded = amount_exceeded
      end
      write_result(result, oprot, 'add_item_to_cart', seqid)
    end

    def process_delete_product(seqid, iprot, oprot)
      args = read_args(iprot, Delete_product_args)
      result = Delete_product_result.new()
      result.success = @handler.delete_product(args.product)
      write_result(result, oprot, 'delete_product', seqid)
    end

    def process_edit_amount(seqid, iprot, oprot)
      args = read_args(iprot, Edit_amount_args)
      result = Edit_amount_result.new()
      result.success = @handler.edit_amount(args.product, args.amount)
      write_result(result, oprot, 'edit_amount', seqid)
    end

    def process_check_out(seqid, iprot, oprot)
      args = read_args(iprot, Check_out_args)
      result = Check_out_result.new()
      begin
        result.success = @handler.check_out()
      rescue ::AmountExceeded => amount_exceeded
        result.amount_exceeded = amount_exceeded
      end
      write_result(result, oprot, 'check_out', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Get_products_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Get_products_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::Product}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Show_cart_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Show_cart_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ::OrderItem}}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_item_to_cart_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1
    AMOUNT = 2

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product},
      AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Add_item_to_cart_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    AMOUNT_EXCEEDED = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      AMOUNT_EXCEEDED => {:type => ::Thrift::Types::STRUCT, :name => 'amount_exceeded', :class => ::AmountExceeded}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_product_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Delete_product_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Edit_amount_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    PRODUCT = 1
    AMOUNT = 2

    FIELDS = {
      PRODUCT => {:type => ::Thrift::Types::STRUCT, :name => 'product', :class => ::Product},
      AMOUNT => {:type => ::Thrift::Types::I32, :name => 'amount'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Edit_amount_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Check_out_args
    include ::Thrift::Struct, ::Thrift::Struct_Union

    FIELDS = {

    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Check_out_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0
    AMOUNT_EXCEEDED = 1

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
      AMOUNT_EXCEEDED => {:type => ::Thrift::Types::STRUCT, :name => 'amount_exceeded', :class => ::AmountExceeded}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

